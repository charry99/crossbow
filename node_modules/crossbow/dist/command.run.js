"use strict";
var Rx = require("rx");
var reporter_resolve_1 = require("./reporter.resolve");
var task_resolve_1 = require("./task.resolve");
var Immutable = require("immutable");
var seq = require("./task.sequence");
var command_run_interactive_1 = require("./command.run.interactive");
var command_run_execute_1 = require("./command.run.execute");
var command_run_execute_2 = require("./command.run.execute");
var task_utils_1 = require("./task.utils");
var debug = require("debug")("cb:command.run");
var _ = require("../lodash.custom");
var TriggerTypes;
(function (TriggerTypes) {
    TriggerTypes[TriggerTypes["command"] = "command"] = "command";
    TriggerTypes[TriggerTypes["watcher"] = "watcher"] = "watcher";
})(TriggerTypes = exports.TriggerTypes || (exports.TriggerTypes = {}));
function getRunCommandSetup(trigger) {
    var cliInput = trigger.cli.input.slice(1);
    /**
     * Task Tracker for external observers
     * @type {Subject<T>}
     */
    trigger.tracker = new Rx.Subject();
    trigger.tracker$ = trigger.tracker.share();
    /**
     * First Resolve the task names given in input.
     */
    var tasks = task_resolve_1.resolveTasks(cliInput, trigger);
    var topLevelParallel = tasks.all.some(function (task) {
        return task.runMode === task_resolve_1.TaskRunModes.parallel;
    });
    /**
     * If only 1 task is being run, check if any sub-tasks
     * are trying to be run in parallel mode and if so, set the runMode
     * This is done to ensure if a child errors, it doesn't affect children.
     * (as it's only a single task via the cli, it wouldn't be expected)
     */
    if (cliInput.length === 1 && topLevelParallel) {
        trigger.config.runMode = task_resolve_1.TaskRunModes.parallel;
    }
    /**
     * All this point, all given task names have been resolved
     * to either modules on disk, or @adaptor tasks, so we can
     * go ahead and create a flattened run-sequence
     */
    var sequence = seq.createFlattenedSequence(tasks.valid, trigger);
    /**
     * With the flattened sequence, we can create nested collections
     * of Rx Observables
     */
    var runner = seq.createRunner(sequence, trigger);
    /**
     * Check if the user intends to handle running the tasks themselves,
     * if thats the case we give them the resolved tasks along with
     * the sequence and the primed runner
     */
    return { tasks: tasks, sequence: sequence, runner: runner };
}
exports.getRunCommandSetup = getRunCommandSetup;
function handleIncomingRunCommand(cli, input, config, reporter) {
    /**
     * Array of top-level task names that are available
     */
    var topLevelTasks = Object.keys(input.tasks);
    /**
     * The shared Map that tasks can read/write to
     */
    var sharedMap = new Rx.BehaviorSubject(Immutable.Map({}));
    var type = TriggerTypes.command;
    debug("top level tasks available", topLevelTasks);
    /**
     * If the interactive flag was given (-i), always try
     * that first.
     */
    if (config.interactive) {
        return enterInteractive();
    }
    /**
     * If the user never provided a task then we either look
     * for a `default` task or enter interactive mode if possible
     * eg:
     *  $ crossbow run
     */
    if (cli.input.length === 1) {
        /**
         * First look if there's a 'default' task defined
         */
        if (hasDefaultTask()) {
            var cliMerged = _.merge({}, cli, { input: ["run", "default"] });
            return Rx.Observable.just(command_run_execute_1.default({
                shared: sharedMap,
                cli: cliMerged,
                input: input,
                config: config,
                reporter: reporter,
                type: TriggerTypes.command
            }));
        }
        /**
         * If no default task was found above, enter interactive mode
         */
        return enterInteractive();
    }
    /**
     * Finally check if tasks were provided on the CLI, but were parents
     */
    var maybes = cli.input.slice(1);
    var maybeParents = maybes.filter(function (x) { return task_utils_1.isParentRef(x, topLevelTasks.filter(task_utils_1.isParentGroupName)); });
    /**
     * If any parent task names were given, go into interactive mode
     */
    if (maybeParents.length) {
        return enterInteractive();
    }
    /**
     * Check if the provided input contains either
     * 'default' or 'default@p' etc
     */
    function hasDefaultTask() {
        if (task_resolve_1.maybeTaskNames(input.tasks, "default").length) {
            return true;
        }
        if (input.tasks["default"] !== undefined) {
            return true;
        }
    }
    /**
     * If no task given, or if user has selected interactive mode,
     * show the UI for task selection
     */
    function enterInteractive() {
        /**
         * No top level tasks, so exit with the correct error
         */
        if (!topLevelTasks.length) {
            reporter({ type: reporter_resolve_1.ReportTypes.NoTasksAvailable });
            return Rx.Observable.just({
                setup: {
                    sequence: [],
                    tasks: { all: [], valid: [], invalid: [] },
                    errors: [{ type: command_run_execute_2.RunCommandReportTypes.NoTasks }]
                },
                update$: Rx.Observable.empty()
            });
        }
        /**
         * Log that no tasks were provided
         */
        reporter({ type: reporter_resolve_1.ReportTypes.NoTasksProvided });
        /**
         * Now prompt for input
         */
        return command_run_interactive_1.default(cli, input, config, reporter)
            .flatMap(function (answers) {
            var cliMerged = _.assign({}, cli, { input: ["run"].concat(answers.tasks) });
            var configMerged = _.merge({}, config, { runMode: task_resolve_1.TaskRunModes.parallel });
            return Rx.Observable.just(command_run_execute_1.default({
                shared: sharedMap,
                cli: cliMerged,
                input: input,
                reporter: reporter,
                config: configMerged,
                type: type
            }));
        });
    }
    /**
     * If we reach here we're dealing with the default case
     * where we are simply executing the command as normal
     * eg:
     *  $ crossbow run task1 task2@p etc ...
     */
    return Rx.Observable.just(command_run_execute_1.default({
        shared: sharedMap,
        cli: cli,
        input: input,
        config: config,
        reporter: reporter,
        type: type
    }));
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handleIncomingRunCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5ydW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29tbWFuZC5ydW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUEwQjtBQUcxQix1REFBK0M7QUFDL0MsK0NBQTBFO0FBSzFFLHFDQUF3QztBQUN4QyxxQ0FBdUM7QUFDdkMscUVBQTREO0FBQzVELDZEQUFzRDtBQUN0RCw2REFBNEQ7QUFFNUQsMkNBQTREO0FBSTVELElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2pELElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBcUJ0QyxJQUFZLFlBR1g7QUFIRCxXQUFZLFlBQVk7SUFDcEIsdUNBQWUsU0FBUyxhQUFBLENBQUE7SUFDeEIsdUNBQWUsU0FBUyxhQUFBLENBQUE7QUFDNUIsQ0FBQyxFQUhXLFlBQVksR0FBWixvQkFBWSxLQUFaLG9CQUFZLFFBR3ZCO0FBRUQsNEJBQW1DLE9BQXVCO0lBQ3RELElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU1Qzs7O09BR0c7SUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ25DLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUUzQzs7T0FFRztJQUNILElBQU0sS0FBSyxHQUFHLDJCQUFZLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzlDLElBQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJO1FBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLDJCQUFZLENBQUMsUUFBUSxDQUFDO0lBQ2xELENBQUMsQ0FB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