"use strict";
var task_transforms_1 = require("./task.transforms");
var _ = require("../lodash.custom");
var debug = require("debug")("cb:task.resolve");
var task_errors_1 = require("./task.errors");
var task_utils_1 = require("./task.utils");
var adaptors = require("./adaptors");
var task_preprocess_1 = require("./task.preprocess");
var task_tree_transforms_1 = require("./task.tree.transforms");
var TaskTypes;
(function (TaskTypes) {
    TaskTypes[TaskTypes["ExternalTask"] = "ExternalTask"] = "ExternalTask";
    TaskTypes[TaskTypes["Adaptor"] = "Adaptor"] = "Adaptor";
    TaskTypes[TaskTypes["TaskGroup"] = "TaskGroup"] = "TaskGroup";
    TaskTypes[TaskTypes["ParentGroup"] = "ParentGroup"] = "ParentGroup";
    TaskTypes[TaskTypes["InlineFunction"] = "InlineFunction"] = "InlineFunction";
})(TaskTypes = exports.TaskTypes || (exports.TaskTypes = {}));
var TaskOriginTypes;
(function (TaskOriginTypes) {
    TaskOriginTypes[TaskOriginTypes["CrossbowConfig"] = "CrossbowConfig"] = "CrossbowConfig";
    TaskOriginTypes[TaskOriginTypes["NpmScripts"] = "NpmScripts"] = "NpmScripts";
    TaskOriginTypes[TaskOriginTypes["FileSystem"] = "FileSystem"] = "FileSystem";
    TaskOriginTypes[TaskOriginTypes["Adaptor"] = "Adaptor"] = "Adaptor";
    TaskOriginTypes[TaskOriginTypes["InlineFunction"] = "InlineFunction"] = "InlineFunction";
    TaskOriginTypes[TaskOriginTypes["InlineArray"] = "InlineArray"] = "InlineArray";
    TaskOriginTypes[TaskOriginTypes["InlineObject"] = "InlineObject"] = "InlineObject";
    TaskOriginTypes[TaskOriginTypes["InlineChildObject"] = "InlineChildObject"] = "InlineChildObject";
})(TaskOriginTypes = exports.TaskOriginTypes || (exports.TaskOriginTypes = {}));
var TaskRunModes;
(function (TaskRunModes) {
    TaskRunModes[TaskRunModes["series"] = "series"] = "series";
    TaskRunModes[TaskRunModes["parallel"] = "parallel"] = "parallel";
})(TaskRunModes = exports.TaskRunModes || (exports.TaskRunModes = {}));
var defaultTask = {
    baseTaskName: "",
    valid: false,
    query: {},
    flags: {},
    subTasks: [],
    inlineFunctions: [],
    externalTasks: [],
    tasks: [],
    parents: [],
    errors: [],
    cbflags: [],
    description: "",
    rawInput: "",
    env: {},
    taskName: undefined,
    runMode: TaskRunModes.series,
    skipped: false,
    ifChanged: [],
    options: {}
};
function mergeOptions(incoming) {
    return function (task) {
        return _.merge(task, {
            env: incoming.env,
            options: _.merge({}, _.get(incoming.options, "_default", {}), _.get(incoming.options, incoming.subTasks.slice(), {})),
            flags: incoming.flags,
            query: incoming.query
        });
    };
}
function fromInlineItems(incoming, current, name, parents, trigger) {
    if (parents.indexOf(name) > -1) {
        return createCircularReferenceTask(incoming, parents);
    }
    if (Array.isArray(current)) {
        var thisParents_1 = parents.concat(incoming.baseTaskName);
        var name_1 = "ParallelGroup(" + current.toString().slice(0, 20) + "...";
        var task = createTask({
            baseTaskName: name_1,
            taskName: name_1,
            runMode: TaskRunModes.parallel,
            tasks: current.map(function (x) { return createFlattenedTask(x, thisParents_1, trigger); }),
            parents: thisParents_1,
            valid: true,
            type: TaskTypes.TaskGroup
        });
        return task;
    }
    return createFlattenedTask(current, parents.concat(name), trigger);
}
var count = 0;
/**
 * Entry point for resolving the task tree from any given point
 */
function createFlattenedTask(taskItem, parents, trigger) {
    /** DEBUG **/
    debug("resolving ('" + typeof taskItem + "') " + taskItem);
    /** DEBUG-END **/
    /**
     * We first 'preprocess' the task in order to
     * handle different types of task input. Supported:
     *  - string
     *  - function
     *  - object literal
     * @type {Task}
     */
    var incoming = task_preprocess_1.preprocessTask(taskItem, trigger, parents);
    /** DEBUG **/
    debug("preprocessed '" + taskItem + "'", incoming);
    /** DEBUG-END **/
    /**
     * We exit very quickly if the pre-process step has delivered
     * an 'adaptor' task - which means that's nothing left to determine.
     */
    if (incoming.type === TaskTypes.Adaptor) {
        return incoming;
    }
    if (incoming.type === TaskTypes.ParentGroup) {
        var subtask = incoming.subTasks[0];
        var topLevelValue_1 = _.get(trigger.input.tasks, ["(" + incoming.baseTaskName + ")"], {});
        var toResolve = (subtask === "*") ? Object.keys(topLevelValue_1) : [subtask];
        if (incoming.tasks.length) {
            var combinedName_1 = incoming.baseTaskName + ":" + incoming.subTasks[0];
            incoming.tasks = [].concat(incoming.tasks)
                .map(function (x) { return fromInlineItems(incoming, x, combinedName_1, parents, trigger); })
                .map(mergeOptions(incoming));
        }
        else {
            incoming.tasks = toResolve.reduce(function (acc, x) {
                var match = _.get(topLevelValue_1, [x]);
                if (match) {
                    var combinedName_2 = incoming.baseTaskName + ":" + x;
                    return acc.concat([].concat(match)
                        .map(function (x) { return fromInlineItems(incoming, x, combinedName_2, parents, trigger); }));
                }
                return acc;
            }, []);
        }
    }
    if (incoming.origin === TaskOriginTypes.InlineObject || incoming.origin === TaskOriginTypes.InlineChildObject) {
        // todo top level object lookup
        if (incoming.tasks) {
            var taskItems = incoming.tasks;
            incoming.tasks = [].concat(taskItems)
                .map(function (x) { return fromInlineItems(incoming, x, incoming.baseTaskName, parents, trigger); });
        }
    }
    if (incoming.type !== TaskTypes.ParentGroup && incoming.origin !== TaskOriginTypes.InlineChildObject) {
        var toplevelValue = getTopLevelValue(incoming.baseTaskName, trigger.input);
        if (incoming.baseTaskName === 'parallel-tasks') {
        }
        if (toplevelValue) {
            incoming.tasks = [].concat(toplevelValue)
                .map(function (x) { return fromInlineItems(incoming, x, incoming.baseTaskName, parents, trigger); })
                .map(function (out) {
                if (incoming.runMode === TaskRunModes.parallel) {
                    if (out.tasks.length > 1 || out.subTasks.length > 1) {
                        out.runMode = incoming.runMode;
                    }
                }
                return out;
            });
        }
        else {
        }
    }
    /**
     * @type {CBFunction[]}
     */
    incoming.inlineFunctions = (function () {
        if (incoming.inlineFunctions.length)
            return incoming.inlineFunctions;
        if (incoming.tasks.length)
            return [];
        var toplevel = getTopLevelValue(incoming.baseTaskName, trigger.input);
        if (typeof toplevel === "function") {
            return [toplevel];
        }
        return [];
    })();
    /**
     * @type {ExternalTask[]}
     */
    incoming.externalTasks = (function () {
        if (incoming.tasks.length)
            return [];
        if (incoming.inlineFunctions.length)
            return [];
        return task_utils_1.locateModule(trigger.config, incoming.baseTaskName);
    })();
    debug("externalTasks: " + JSON.stringify(incoming.externalTasks[0]));
    /**
     * Set task types
     * @type {TaskTypes}
     */
    incoming.type = (function () {
        if (typeof incoming.type !== "undefined")
            return incoming.type;
        if (incoming.externalTasks.length) {
            return TaskTypes.ExternalTask;
        }
        if (incoming.inlineFunctions.length) {
            return TaskTypes.InlineFunction;
        }
        return TaskTypes.TaskGroup;
    })();
    debug("type: " + incoming.type);
    /**
     * @type {boolean}
     */
    incoming.valid = (function () {
        if (incoming.type === TaskTypes.ParentGroup) {
            if (incoming.tasks.length) {
                return true;
            }
        }
        if (incoming.type === TaskTypes.TaskGroup)
            return true;
        if (incoming.type === TaskTypes.InlineFunction)
            return true;
        if (incoming.type === TaskTypes.ExternalTask)
            return true;
        return false;
    })();
    debug("valid: " + incoming.valid);
    /**
     * Now apply any transformations
     * @type {Task}
     */
    incoming = task_transforms_1.applyTransforms(incoming);
    /**
     * Collect errors
     * @type {TaskError[]}
     */
    incoming.errors = task_errors_1.gatherTaskErrors(incoming, trigger);
    debug("errors: " + incoming.errors);
    /**
     * Add parents array (for detecting circular references);
     * @type {string[]}
     */
    incoming.parents = parents;
    return incoming;
}
/**
 * Factory for creating a new Task Item
 * @param {object} obj
 * @returns {object}
 */
function createTask(obj) {
    return _.mergeWith({}, defaultTask, obj, function customizer(objValue, srcValue) {
        if (_.isArray(objValue)) {
            return objValue.concat(srcValue);
        }
    });
}
exports.createTask = createTask;
/**
 * When a circular reference is detected, exit with the appropriate error
 */
function createCircularReferenceTask(incoming, parents) {
    return _.merge({}, defaultTask, incoming, {
        errors: [{
                type: task_errors_1.TaskErrorTypes.CircularReference,
                incoming: incoming,
                parents: parents
            }]
    });
}
exports.createCircularReferenceTask = createCircularReferenceTask;
/**
 * Match a task name with a top-level value from 'tasks'
 */
function getTopLevelValue(baseTaskName, input) {
    var exactMatch = input.tasks[baseTaskName];
    if (exactMatch !== undefined) {
        return exactMatch;
    }
    var maybeGroup = Object.keys(input.tasks)
        .filter(function (x) { return x.indexOf("(" + baseTaskName + ")") > -1; });
    if (maybeGroup.length) {
        return input.tasks[maybeGroup[0]];
    }
    var maybes = Object.keys(input.tasks)
        .filter(function (x) { return !task_utils_1.isParentGroupName(x); })
        .filter(function (taskName) { return taskName.match(new RegExp("^" + baseTaskName + "($|@(.+?))")) !== null; });
    if (maybes.length) {
        return input.tasks[maybes[0]];
    }
    return undefined;
}
exports.getTopLevelValue = getTopLevelValue;
/**
 * Anything that begins @ is always an adaptor and will skip
 * file i/o etc.
 * @param taskName
 * @param parents
 * @returns {Task}
 */
function createAdaptorTask(taskName, parents) {
    taskName = task_utils_1.removeTrailingNewlines(taskName);
    /**
     * Strip the first part of the task name.
     *  eg: `@npm eslint`
     *   ->  eslint
     * @type {string}
     */
    var commandInput = taskName.replace(/^@(.+?) /, "");
    /**
     * Get a valid adaptors adaptor name
     * @type {string|undefined}
     */
    var validAdaptorName = Object.keys(adaptors).filter(function (x) {
        return taskName.match(new RegExp("^@" + x + " "));
    })[0];
    /**
     * If it was not valid, return a simple
     * task that will be invalid
     */
    if (!validAdaptorName) {
        return createTask({
            rawInput: taskName,
            taskName: taskName,
            type: TaskTypes.Adaptor,
            origin: TaskOriginTypes.Adaptor,
            adaptor: taskName.split(" ")[0],
            errors: [{
                    type: task_errors_1.TaskErrorTypes.AdaptorNotFound,
                    taskName: taskName
                }]
        });
    }
    return createTask({
        baseTaskName: taskName,
        valid: true,
        adaptor: validAdaptorName,
        taskName: taskName,
        rawInput: taskName,
        parents: parents,
        command: commandInput,
        runMode: TaskRunModes.series,
        origin: TaskOriginTypes.Adaptor,
        type: TaskTypes.Adaptor,
    });
}
exports.createAdaptorTask = createAdaptorTask;
/**
 * Look at a hash and determine if the incoming 'taskName'
 * could match a valid taskName.
 * eg:
 *  $ crossbow run shane
 *
 * -> matches:   'shane' & 'shane@p'
 */
function maybeTaskNames(tasks, taskName) {
    return Object.keys(tasks).reduce(function (all, key) {
        var match = key.match(new RegExp("^" + taskName + "@(.+)"));
        if (match) {
            return tasks[key];
        }
        return all;
    }, []);
}
exports.maybeTaskNames = maybeTaskNames;
/**
 * Attempt to match a task-name from within the various 'inputs'
 * given
 */
function pullTaskFromInput(taskName, input) {
    if (input.tasks[taskName] !== undefined) {
        return { items: [].concat(input.tasks[taskName]), origin: TaskOriginTypes.CrossbowConfig };
    }
    /**
     * Next, look at the top-level input,
     * is this taskname going to match, and if so, does it contain any flags?
     */
    var maybes = maybeTaskNames(input.tasks, taskName);
    if (maybes.length) {
        return { items: maybes, origin: TaskOriginTypes.CrossbowConfig };
    }
    return { items: [], origin: TaskOriginTypes.CrossbowConfig };
}
/**
 * A task is valid if every child eventually resolves to
 * having a module or has a adaptors helper
 */
function validateTask(task, trigger) {
    /**
     * Return early if a task has previously
     * been marked as invalid
     */
    if (task.valid === false) {
        return false;
    }
    /**
     * If the task has errors attached, it's always invalid
     */
    if (task.errors.length) {
        return false;
    }
    /**
     * If this task has subtasks in the `task.tasks` Array
     * return the result of validating each of those.
     */
    if (task.tasks.length) {
        return task.tasks.every(function (t) {
            return validateTask(t, trigger);
        });
    }
    /**
     * The final chance for a task to be deemed valid
     * is when `task.adaptors` is set to a string.
     *  eg: lint: '@npm eslint'
     *   -> true
     */
    if (typeof task.adaptor === "string") {
        /**
         * task.adaptor is a string, but does it match any adaptors?
         * If it does, return the result of running the
         * validate method from the adaptor
         */
        if (adaptors[task.adaptor]) {
            return adaptors[task.adaptor].validate.apply(null, [task, trigger]);
        }
    }
    /**
     * If this task was set to InlineFunction, it's always valid
     * (as there's a function to call)
     */
    if (task.type === TaskTypes.InlineFunction) {
        return true;
    }
    /**
     * If the task has external modules associated
     * with it, it's always valid (as it has things to run)
     */
    if (task.type === TaskTypes.ExternalTask) {
        return true;
    }
    /**
     * In the case where `task.modules` has a length (meaning a JS file was found)
     * and there are NO sub tasks to validate, this means the current
     * task is ALWAYS valid so we can return true;
     */
    if (task.externalTasks.length && !task.tasks.length) {
        return true;
    }
}
function resolveTasks(taskCollection, trigger) {
    /**
     * Now begin making the nested task tree
     */
    var taskList = taskCollection
        .map(function (task) {
        return createFlattenedTask(task, [], trigger);
    });
    /**
     * Now apply any last-minute tree transformations
     */
    taskList = task_tree_transforms_1.applyTreeTransforms(taskList);
    /**
     * Return both valid & invalid tasks. We want to let consumers
     * handle errors/successes
     * @type {{valid: Array, invalid: Array}}
     */
    var output = {
        valid: taskList.filter(function (x) { return validateTask(x, trigger); }),
        invalid: taskList.filter(function (x) { return !validateTask(x, trigger); }),
        all: taskList
    };
    return output;
}
exports.resolveTasks = resolveTasks;
//# sourceMappingURL=data:application/json;base64,