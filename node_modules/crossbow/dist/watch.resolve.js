"use strict";
var task_utils_1 = require("./task.utils");
var watch_preprocess_1 = require("./watch.preprocess");
var watch_errors_1 = require("./watch.errors");
var blacklist = ["options", "bs-config", "before", "id"];
var _ = require("../lodash.custom");
exports.defaultWatchOptions = {
    ignoreInitial: true,
    block: false,
    throttle: 0,
    delay: 0,
    debounce: 0,
    group: 0,
};
/**
 * Create a single watch task item consisting of
 *  - patterns
 *  - tasks
 *  - options
 */
function createOne(name, index, item, itemOptions, globalOptions) {
    if (task_utils_1.isPlainObject(item)) {
        if (item.patterns && item.tasks) {
            return {
                patterns: [].concat(item.patterns).reduce(function (a, x) { return a.concat(x.split(":")); }, []),
                tasks: [].concat(item.tasks),
                options: _.merge({}, exports.defaultWatchOptions, globalOptions, itemOptions),
                watcherUID: name + "-" + index
            };
        }
    }
    return item;
}
/**
 * @param watchTaskParent
 * @param globalOptions
 * @returns {*}
 */
function getFormattedTask(name, watchTaskParent, globalOptions) {
    /**
     * Simple mode is when patterns + tasks given as top-level
     * keys. This means we automatically just into simple mode
     *  eg:
     *      default: {
     *          patterns: ['*.json']
     *          tasks: ['*.json']
     * }
     *
     */
    if (watchTaskParent.patterns && watchTaskParent.tasks) {
        return [createOne(name, 0, watchTaskParent, watchTaskParent.options, globalOptions)];
    }
    /**
     * Look at each key provided to decide if it can
     * be transformed into a watcher obj
     */
    return Object.keys(watchTaskParent)
        .filter(function (x) { return blacklist.indexOf(x) === -1; })
        .reduce(function (all, item, index) {
        /**
         * Here we assume the long-hand version is being
         * used where the watchers property is provided.
         * If it is, that means we can create a watcher
         * object for each item in the 'watchers' array
         * eg:
         *
         * default:
         *   options:
         *     exclude: '*.html'
         *   before: ['bs']
         *   watchers:
         *     - patterns: ['test/fixtures']
         *       tasks:    ['1', '2']
         *     - patterns: ['*.css']
         *       tasks:    '3'
         */
        if (item === "watchers") {
            /**
             * If the `watcher` property is an Array, it must
             * be an Array of Objects, so process each one individually.
             * eg:
             *  default:
             *      watchers: [
             *          {
             *              patterns: ["scss/**", "css/*.scss"],
             *              tasks:    ["$npm node-sass"],
             *          }
             *      ]
             */
            if (Array.isArray(watchTaskParent.watchers)) {
                return all.concat(watchTaskParent.watchers.map(function (watcher, i) {
                    return createOne(name, i, watcher, watchTaskParent.options, globalOptions);
                }));
            }
            /**
             * If the `watchers` property is a plain object,
             * use it's keys as watch patterns and the values as
             * tasks.
             * eg:
             *  default:
             *      watchers: {
             *          "*.js":   ["$npm eslint"],
             *          "*.scss": ["$npm node-sass"]
             *      }
             */
            if (task_utils_1.isPlainObject(watchTaskParent.watchers)) {
                return Object.keys(watchTaskParent.watchers)
                    .map(function (key, i) { return createOne(name, i, {
                    patterns: key,
                    tasks: watchTaskParent.watchers[key]
                }, watchTaskParent.options, globalOptions); });
            }
        }
        /**
         * At this point assume that the short-hard pattern <pattern>:<tasks>
         *  eg:
         *      "*.js": ['uglify']
         */
        return all.concat(createOne(name, index, {
            patterns: item,
            tasks: watchTaskParent[item] // value as the tasks array
        }, watchTaskParent.options, globalOptions));
    }, []);
}
function createFlattenedWatchTask(taskName, trigger) {
    var fromCli = ["block", "throttle", "debounce"].reduce(function (acc, key) {
        // console.log(typeof trigger.config[key]);
        if (typeof trigger.config[key] !== "undefined") {
            acc[key] = trigger.config[key];
        }
        return acc;
    }, {});
    var globalOptions = _.assign({}, trigger.input.watch.options, fromCli);
    var incoming = watch_preprocess_1.preprocessWatchTask(taskName);
    var selection = trigger.input.watch[incoming.taskName] || {};
    var watchers = getFormattedTask(incoming.taskName, selection, globalOptions);
    var errors = watch_errors_1.gatherWatchTaskErrors(incoming, trigger.input);
    return {
        name: taskName,
        before: selection.before || [],
        options: selection.options || {},
        watchers: watchers,
        errors: errors
    };
}
function validateTask(task, trigger) {
    return task.errors.length === 0;
}
function resolveWatchTasks(taskNames, trigger) {
    var taskList = taskNames
        .map(function (taskName) {
        return createFlattenedWatchTask(taskName, trigger);
    });
    /**
     * Return both valid & invalid tasks. We want to let consumers
     * handle errors/successes
     * @type {{valid: Array, invalid: Array}}
     */
    var output = {
        valid: taskList.filter(function (x) { return validateTask(x, trigger); }),
        invalid: taskList.filter(function (x) { return !validateTask(x, trigger); }),
        all: taskList
    };
    return output;
}
exports.resolveWatchTasks = resolveWatchTasks;
/**
 * The goal of this function is to produce a flat array containing tasks as strings
 * this allows us to feed that into the task resolution stuff
 */
function resolveBeforeTasks(beforeFlagsFromCliOrConfig, input, watchTasks) {
    var fromTopLevelInput = [].concat(input.watch.before);
    var fromWatchTasks = watchTasks.reduce(function (acc, item) {
        return acc.concat(item.before);
    }, []);
    return beforeFlagsFromCliOrConfig.concat(fromTopLevelInput, fromWatchTasks).filter(Boolean);
}
exports.resolveBeforeTasks = resolveBeforeTasks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2gucmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy93YXRjaC5yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSwyQ0FBMkM7QUFFM0MsdURBQXVEO0FBQ3ZELCtDQUFxRTtBQVFyRSxJQUFNLFNBQVMsR0FBRyxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNELElBQU0sQ0FBQyxHQUFXLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRWpDLFFBQUEsbUJBQW1CLEdBQW1CO0lBQy9DLGFBQWEsRUFBRSxJQUFJO0lBQ25CLEtBQUssRUFBRSxLQUFLO0lBQ1osUUFBUSxFQUFFLENBQUM7SUFDWCxLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRSxDQUFDO0lBQ1gsS0FBSyxFQUFFLENBQUM7Q0FDWCxDQUFDO0FBcUNGOzs7OztHQUtHO0FBQ0gsbUJBQW1CLElBQVksRUFBRSxLQUFhLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxhQUFhO0lBQzVFLEVBQUUsQ0FBQyxDQUFDLDBCQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxDQUFDO2dCQUNILFFBQVEsRUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQXRCLENBQXNCLEVBQUUsRUFBRSxDQUFDO2dCQUNqRixLQUFLLEVBQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNqQyxPQUFPLEVB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