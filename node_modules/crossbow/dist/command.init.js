"use strict";
var command_run_1 = require("./command.run");
var Immutable = require("immutable");
var Rx = require("rx");
var file = require("./file.utils");
var path_1 = require("path");
var reporter_resolve_1 = require("./reporter.resolve");
var _ = require("../lodash.custom");
var InitConfigFileErrorTypes;
(function (InitConfigFileErrorTypes) {
    InitConfigFileErrorTypes[InitConfigFileErrorTypes["InitInputFileExists"] = "InitInputFileExists"] = "InitInputFileExists";
    InitConfigFileErrorTypes[InitConfigFileErrorTypes["InitInputFileTypeNotSupported"] = "InitInputFileTypeNotSupported"] = "InitInputFileTypeNotSupported";
})(InitConfigFileErrorTypes = exports.InitConfigFileErrorTypes || (exports.InitConfigFileErrorTypes = {}));
var InitConfigFileTypes;
(function (InitConfigFileTypes) {
    InitConfigFileTypes[InitConfigFileTypes["yaml"] = "yaml"] = "yaml";
    InitConfigFileTypes[InitConfigFileTypes["js"] = "js"] = "js";
    InitConfigFileTypes[InitConfigFileTypes["json"] = "json"] = "json";
    InitConfigFileTypes[InitConfigFileTypes["cbfile"] = "cbfile"] = "cbfile";
})(InitConfigFileTypes = exports.InitConfigFileTypes || (exports.InitConfigFileTypes = {}));
function execute(trigger) {
    var config = trigger.config, reporter = trigger.reporter;
    var templateDir = path_1.join(__dirname, "..", "templates");
    var maybeExistingFileInputs = (_a = {},
        _a[InitConfigFileTypes.yaml] = "crossbow.yaml",
        _a[InitConfigFileTypes.js] = "crossbow.js",
        _a[InitConfigFileTypes.json] = "crossbow.json",
        _a[InitConfigFileTypes.cbfile] = "cbfile.js",
        _a);
    var outputFileName = maybeExistingFileInputs[config.type];
    if (outputFileName === undefined) {
        var errors_1 = [{
                type: InitConfigFileErrorTypes.InitInputFileTypeNotSupported,
                providedType: config.type,
                supportedTypes: maybeExistingFileInputs
            }];
        if (!config.handoff) {
            reporter({
                type: reporter_resolve_1.ReportTypes.InitInputFileTypeNotSupported,
                data: {
                    error: errors_1[0]
                }
            });
        }
        return Rx.Observable.just({
            setup: {
                existingFilesInCwd: [],
                matchingFiles: [],
                errors: errors_1
            }
        });
    }
    /**
     * Attempt to load existing config files from the CWD
     * @type {ExternalFile[]}
     */
    var existingFilesInCwd = file.readFilesFromDisk(_.values(maybeExistingFileInputs), config.cwd);
    /**
     * Now check if any of the existing files match the one the user
     * is attempting to create.
     *
     * eg:
     *  crossbow init --type js
     * -> crossbow.js already exists in cwd -> error
     *
     * eg:
     *  crossbow init --type yaml
     * -> crossbow.js already exists in cwd, which is ok because they want a .yaml file -> success
     *
     * @type {ExternalFile[]}
     */
    var matchingFiles = existingFilesInCwd
        .filter(function (x) { return x.errors.length === 0; })
        .filter(function (file) { return outputFileName === file.parsed.base; });
    var errors = (function () {
        if (matchingFiles.length) {
            return matchingFiles.map(function (file) {
                return { type: InitConfigFileErrorTypes.InitInputFileExists, file: file };
            });
        }
        return [];
    })();
    // /**
    //  * Allow consumer to handle executions
    //  */
    // if (config.handoff) {
    //     return Rx.Ob{existingFilesInCwd, matchingFiles, errors};
    // }
    if (errors.length) {
        reporter({
            type: reporter_resolve_1.ReportTypes.DuplicateInputFile,
            data: {
                error: errors[0]
            }
        });
        return Rx.Observable.just({
            setup: {
                existingFilesInCwd: existingFilesInCwd,
                matchingFiles: matchingFiles,
                errors: errors
            }
        });
    }
    var templateFilePath = path_1.join(templateDir, outputFileName);
    var outputFilePath = path_1.join(config.cwd, outputFileName);
    var output = {
        existingFilesInCwd: existingFilesInCwd,
        matchingFiles: matchingFiles,
        errors: errors,
        outputFilePath: outputFilePath,
        outputFileName: outputFileName,
        templateFilePath: templateFilePath
    };
    reporter({
        type: reporter_resolve_1.ReportTypes.InputFileCreated,
        data: {
            parsed: path_1.parse(outputFilePath)
        }
    });
    return Rx.Observable.just({ setup: output });
    var _a;
}
function handleIncomingInitCommand(cli, input, config, reporter) {
    return execute({
        shared: new Rx.BehaviorSubject(Immutable.Map({})),
        cli: cli,
        input: input,
        config: config,
        reporter: reporter,
        type: command_run_1.TriggerTypes.command
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handleIncomingInitCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5pbml0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1hbmQuaW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkNBQTJEO0FBRzNELHFDQUF3QztBQUN4Qyx1QkFBMEI7QUFDMUIsbUNBQXFDO0FBRXJDLDZCQUFpQztBQUNqQyx1REFBK0M7QUFNL0MsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFdEMsSUFBWSx3QkFHWDtBQUhELFdBQVksd0JBQXdCO0lBQ2hDLDJFQUEyQixxQkFBcUIseUJBQUEsQ0FBQTtJQUNoRCxxRkFBcUMsK0JBQStCLG1DQUFBLENBQUE7QUFDeEUsQ0FBQyxFQUhXLHdCQUF3QixHQUF4QixnQ0FBd0IsS0FBeEIsZ0NBQXdCLFFBR25DO0FBc0JELElBQVksbUJBS1g7QUFMRCxXQUFZLG1CQUFtQjtJQUMzQixrREFBWSxNQUFNLFVBQUEsQ0FBQTtJQUNsQixnREFBVSxJQUFJLFFBQUEsQ0FBQTtJQUNkLGtEQUFZLE1BQU0sVUFBQSxDQUFBO0lBQ2xCLG9EQUFjLFFBQVEsWUFBQSxDQUFBO0FBQzFCLENBQUMsRUFMVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQUs5QjtBQUVELGlCQUFpQixPQUF1QjtJQUM3QixJQUFBLHVCQUFNLEVBQUUsMkJBQVEsQ0FBWTtJQUVuQyxJQUFNLFdBQVcsR0FBRyxXQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUV2RCxJQUFNLHVCQUF1QjtRQUN6QixHQUFDLG1CQUFtQixDQUFDLElBQUksSUFBRyxlQUFlO1FBQzNDLEdBQUMsbUJBQW1CLENBQUMsRUFBRSxJQUFHLGFBQWE7UUFDdkMsR0FBQyxtQkFBbUIsQ0FBQyxJQUFJLElBQUcsZUFBZTtRQUMzQyxHQUFDLG1CQUFtQixDQUFDLE1BQU0sSUFBRyxXQUFXO1dBQzVDLENBQUM7SUFFRixJQUFNLGNBQWMs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