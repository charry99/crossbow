"use strict";
var task_utils_1 = require("../task.utils");
var task_resolve_1 = require("../task.resolve");
var task_resolve_2 = require("../task.resolve");
var task_runner_1 = require("../task.runner");
var defaultReporter_1 = require("./defaultReporter");
function taskPreviews(item) {
    if (!item.tasks.length) {
        if (item.type === task_resolve_2.TaskTypes.InlineFunction) {
            if (item.inlineFunctions[0].name) {
                return "[ Function: " + item.inlineFunctions[0].name + " ]";
            }
            return "[ Function ]";
        }
    }
    var names = item.tasks.reduce(function (acc, task) {
        if (task.tasks.length && task.baseTaskName === "") {
            return acc.concat(task.tasks.map(function (x) { return defaultReporter_1.getLabel(x); }));
        }
        return acc.concat(defaultReporter_1.getLabel(task));
    }, [])
        .map(function (x) { return task_utils_1.escapeNewLines(x); });
    return "[ " + names.join(", ") + " ]";
}
function limit(inputString, linelength) {
    var rem = inputString.length - linelength;
    if (rem > 0) {
        return inputString.slice(0, linelength - 3) + "...";
    }
    return inputString;
}
function getSimpleTaskList(tasks, longest) {
    var filtered = tasks
        .filter(function (x) { return !task_utils_1.isInternal(x.taskName); })
        .filter(function (x) { return x.baseTaskName[0] !== "_"; });
    return twoCol(filtered, longest).map(function (x) { return x[0] + "  " + x[1]; });
}
exports.getSimpleTaskList = getSimpleTaskList;
function twoCol(tasks, longest) {
    var cols = process.stdout.columns;
    return tasks.map(function (task) {
        var outgoingName = (function () {
            if (task.type === task_resolve_2.TaskTypes.ParentGroup) {
                return task.baseTaskName + ":" + task.subTasks[0];
            }
            if (task.runMode === task_resolve_1.TaskRunModes.parallel) {
                return task.baseTaskName + " <p>";
            }
            return task.baseTaskName;
        })();
        var name = task_utils_1.padLine(outgoingName, longest + 1);
        var desclength = (cols - 6) - longest;
        var desc = (function () {
            if (task.description) {
                return "{bold:" + limit(task.description, desclength);
            }
            /**
             * .js files on disk
             */
            if (task.type === task_resolve_2.TaskTypes.ExternalTask) {
                return limit("Run via: " + task.externalTasks[0].parsed.name, desclength);
            }
            /**
             * .sh files on disk
             */
            if (task.origin === task_resolve_1.TaskOriginTypes.FileSystem) {
                return limit("Run via: " + task.externalTasks[0].parsed.name, desclength);
            }
            if (task.type === task_resolve_2.TaskTypes.ParentGroup) {
                return limit(taskPreviews(task), desclength);
            }
            return limit(taskPreviews(task), desclength);
        })();
        return ["{yellow:" + name + "}", desc];
    });
}
exports.twoCol = twoCol;
function twoColWatchers(runners) {
    var longest = task_utils_1.longestString(runners.valid.map(function (x) { return x.parent; }));
    var cols = process.stdout.columns;
    return runners.valid.map(function (runner) {
        var name = task_utils_1.padLine(runner.parent, longest + 1);
        var desclength = (cols - 6) - longest;
        var desc = limit(runner.patterns.length + " pattern(s), " + runner.tasks.length + " task(s)", desclength);
        return [name, desc];
    });
}
exports.twoColWatchers = twoColWatchers;
function _taskReport(report) {
    var skipped = report.item.task.skipped || report.stats.skipped;
    var item = report.item;
    var task = item.task;
    var labelPrefix = defaultReporter_1.getLabel(task);
    var label = task_utils_1.escapeNewLines((function () {
        if (item.subTaskName) {
            return item.task.taskName + ":{bold:" + item.subTaskName + "}";
        }
        if (item.viaName) {
            if (item.viaName.indexOf(":") > -1) {
                var split = item.viaName.split(":");
                return split[0] + ":{bold:" + split[1] + "}";
            }
            return item.viaName;
        }
        return labelPrefix;
    })());
    var withFlags = (function (label) {
        if (Object.keys(task.flags).length) {
            return "" + label + task.rawInput.replace(label, "");
        }
        return label;
    })(label);
    return (function (label) {
        if (report.type === task_runner_1.TaskReportType.start) {
            if (skipped) {
                return "{yellow:-} " + label + " {yellow:(skipped)}";
            }
            return "{yellow:>} " + label;
        }
        if (report.type === task_runner_1.TaskReportType.end) {
            if (skipped) {
                return "";
            }
            return "{green:\u2714} " + label + " {yellow:(" + duration(report.stats.duration) + ")}";
        }
        if (report.type === task_runner_1.TaskReportType.error) {
            return "{red:x} " + label;
        }
    })(withFlags);
}
exports._taskReport = _taskReport;
function duration(ms) {
    return String((Number(ms) / 1000).toFixed(2)) + "s";
}
exports.duration = duration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay5saXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JlcG9ydGVycy90YXNrLmxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUFvRztBQUNwRyxnREFBb0U7QUFDcEUsZ0RBQTBDO0FBRTFDLDhDQUEwRDtBQUMxRCxxREFBMkM7QUFNM0Msc0JBQXNCLElBQVU7SUFFNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDekMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixNQUFNLENBQUMsaUJBQWUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQUksQ0FBQztZQUMzRCxDQUFDO1lBQ0QsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUMxQixDQUFDO0lBQ0wsQ0FBQztJQUVELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLElBQVU7UUFDNUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsMEJBQVEsQ0FBQyxDQUFDLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3hELENBQUM7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQywwQkFBUSxDQUFDLElB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