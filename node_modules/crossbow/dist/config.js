"use strict";
var task_resolve_1 = require("./task.resolve");
var path_1 = require("path");
var command_init_1 = require("./command.init");
var _ = require("../lodash.custom");
var SignalTypes;
(function (SignalTypes) {
    SignalTypes[SignalTypes["Exit"] = "Exit"] = "Exit";
    SignalTypes[SignalTypes["FileWrite"] = "FileWrite"] = "FileWrite";
})(SignalTypes = exports.SignalTypes || (exports.SignalTypes = {}));
/**
 * @type {{cwd: *, runMode: string, resumeOnError: boolean, summary: string, strict: boolean}}
 */
var defaults = {
    /**
     * The current working directory, we never advise changing this
     */
    cwd: process.cwd(),
    /**
     * By default, tasks will wait in line and run when the previous
     * one completes. You can set this to 'parallel' instead
     * if you wish for your code to run as fast as possible
     */
    runMode: "series",
    resumeOnError: false,
    parallel: false,
    input: [],
    bin: [],
    binExecutables: [],
    binDirectories: [],
    /**
     * Dump json to disk for debugging
     */
    dump: false,
    debug: false,
    dryRun: false,
    dryRunDuration: 500,
    force: false,
    /**
     * How much task information should be output
     * following task completion/setup
     */
    verbose: 2,
    /**
     * How should task summaries be output
     */
    reporter: "default",
    /**
     * Will eliminate any crossbow output.
     *
     */
    outputOnly: false,
    /**
     * What to do with child process output
     */
    suppressOutput: false,
    /**
     * Log when tasks start/end
     */
    progress: false,
    /**
     * should the resolved workload be handed off
     * to the caller?
     */
    handoff: false,
    /**
     * Show the prompt for selecting tasks?
     */
    interactive: false,
    /**
     *
     */
    loadDefaultInputs: false,
    /**
     *
     */
    nodeModulesPaths: ["node_modules"],
    /**
     *
     * CI mode - will exit if any shell/npm scripts
     * return a non-zero exit code
     *
     * Should a failing task be allowed to quit the process?
     */
    fail: true,
    /**
     * Crossbow will add all options to your environment vars
     * and will be path-based + prefixed
     * eg:
     *  options: {
     *      docker: {
     *          port: 8000
     *      }
     *  }
     *
     *  ->
     *      CB_DOCKER_PORT=8000
     */
    envPrefix: "cb",
    /**
     *
     */
    envFile: [],
    envFiles: [],
    envFilePrefix: [],
    /**
     * Global ENV vars
     */
    env: {},
    /**
     * Tasks that should be run before any watchers begin
     */
    before: [],
    /**
     * Any tasks that should be skipped
     */
    skip: [],
    /**
     *
     */
    type: command_init_1.InitConfigFileTypes.yaml,
    reporters: [],
    tasksDir: ["tasks"]
};
/**
 * Allow single char flags such as
 *    $ crossbow run task1 task2 -p
 *
 * @type {{p: flagTransforms.p}}
 */
var flagTransforms = {
    /**
     * Take any -e flags and set them
     * on the config.env vars.
     *
     * eg: crossbow run task.js -e PET=kittie
     */
    e: function (opts) {
        opts.e.forEach(function (inputString) {
            var split = inputString.split("=").map(function (x) { return x.trim(); }).filter(Boolean);
            if (split.length === 2) {
                opts.env[split[0]] = split[1];
            }
        });
        return opts;
    },
    /**
     * If parallel run mode has been set, update the
     * corresponding runMode options too
     */
    parallel: function (opts) {
        if (opts.parallel === true) {
            opts.runMode = task_resolve_1.TaskRunModes.parallel;
            return opts;
        }
        opts.runMode = task_resolve_1.TaskRunModes.series;
        return opts;
    },
    cwd: function (opts) {
        opts.cwd = path_1.resolve(opts.cwd);
        return opts;
    },
    input: function (opts) {
        if (opts.input && !Array.isArray(opts.input)) {
            opts.input = [opts.input];
        }
        return opts;
    }
};
/**
 * Merge default with incoming opts.
 * Also deal with single char flag
 * @returns {*}
 */
function merge(opts) {
    var newOpts = _.assign({}, defaults, opts);
    return Object.keys(flagTransforms)
        .reduce(function (opts, x) {
        if (opts[x] !== undefined) {
            return flagTransforms[x].call(null, opts);
        }
        return opts;
    }, newOpts);
}
exports.merge = merge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0NBQTRDO0FBRzVDLDZCQUE2QjtBQUM3QiwrQ0FBbUQ7QUFPbkQsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFdEMsSUFBWSxXQUdYO0FBSEQsV0FBWSxXQUFXO0lBQ25CLGtDQUFZLE1BQU0sVUFBQSxDQUFBO0lBQ2xCLHVDQUFpQixXQUFXLGVBQUEsQ0FBQTtBQUNoQyxDQUFDLEVBSFcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFHdEI7QUErRUQ7O0dBRUc7QUFDSCxJQUFNLFFBQVEsR0FBMEI7SUFDcEM7O09BRUc7SUFDSCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUNsQjs7OztPQUlHO0lBQ0gsT0FBTyxFQUFPLFFBQVE7SUFDdEIsYUFBYSxFQUFFLEtBQUs7SUFDcEIsUUFBUSxFQUFFLEtBQUs7SUFDZixLQUFLLEVBQUUsRUFBRTtJQUNULEdBQUcsRUFBRSxFQUFFO0lBQ1AsY0FBYyxFQUFFLEVBQUU7SUFDbEIsY0FBYyxFQUFFLEVBQUU7SUFDbEI7O09BRUc7SUFDSCxJQUFJLEVBQUUsS0FBSztJQUNYLEtBQUssRUFBRSxLQUFLO0lBQ1osTUFBTSxFQUFFLEtBQUs7SUFDYixjQUFjLEVBQUUsR0FBRztJQUNuQixLQUFLLEVBQUUsS0FBSztJQUNaOzs7T0FHRztJQUNILE9BQU8sRUFBRSxDQUFDO0lBQ1Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsU0FBUztJQUNuQjs7O09BR0c7SUFDSCxVQUFVLEVBQUUsS0FBSztJQUNqQjs7T0FFRztJQUNILGNBQWMsRUFBRSxLQUFLO0lBQ3JCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLEtBQUs7SUFDZjs7O09BR0c7SUFDSCxPQUFPLEVBQUUsS0FBSztJQUNkOztPQUVHO0lBQ0gsV0FBVyxFQUFFLEtBQUs7SUFD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