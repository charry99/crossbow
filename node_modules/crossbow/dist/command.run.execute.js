"use strict";
var command_run_1 = require("./command.run");
var reporter_resolve_1 = require("./reporter.resolve");
var task_resolve_1 = require("./task.resolve");
var Rx = require("rx");
var command_run_context_1 = require("./command.run.context");
var debug = require("debug")("cb:command.run.execute");
var RunCommandReportTypes;
(function (RunCommandReportTypes) {
    RunCommandReportTypes[RunCommandReportTypes["NoTasks"] = "NoTasks"] = "NoTasks";
    RunCommandReportTypes[RunCommandReportTypes["Setup"] = "Setup"] = "Setup";
    RunCommandReportTypes[RunCommandReportTypes["Complete"] = "Complete"] = "Complete";
    RunCommandReportTypes[RunCommandReportTypes["TaskReport"] = "TaskReport"] = "TaskReport";
})(RunCommandReportTypes = exports.RunCommandReportTypes || (exports.RunCommandReportTypes = {}));
function executeRunCommand(trigger) {
    var cli = trigger.cli, input = trigger.input, config = trigger.config, reporter = trigger.reporter;
    var _a = command_run_1.getRunCommandSetup(trigger), tasks = _a.tasks, sequence = _a.sequence, runner = _a.runner;
    /**
     * Never continue if any tasks were flagged as invalid and we've not handed
     * off
     */
    if (tasks.invalid.length) {
        reporter({
            type: reporter_resolve_1.ReportTypes.TaskErrors,
            data: {
                tasks: tasks.all,
                taskCollection: cli.input.slice(1),
                input: input,
                config: config
            }
        });
        return {
            setup: {
                sequence: sequence,
                tasks: tasks,
                errors: []
            },
            update$: Rx.Observable.empty()
        };
    }
    debug("~ run mode from config in mode: '" + config.runMode + "'");
    /**
     * Report task list that's about to run
     */
    reporter({ type: reporter_resolve_1.ReportTypes.TaskList, data: { sequence: sequence, cli: cli, titlePrefix: "", config: config } });
    /**
     * Get a run context for this execution.
     * note: This could take some time as it may need
     * to hash directories etc. A run context is just a key=>value
     * map of read-only values.
     */
    return {
        setup: {
            sequence: sequence,
            tasks: tasks,
            errors: []
        },
        update$: command_run_context_1.default(tasks.all, trigger)
            .flatMap(function (runContext) {
            if (trigger.config.runMode === task_resolve_1.TaskRunModes.parallel) {
                return runner.parallel(runContext);
            }
            return runner.series(runContext);
        }).share()
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = executeRunCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5ydW4uZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tYW5kLnJ1bi5leGVjdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw2Q0FBaUU7QUFDakUsdURBQStDO0FBQy9DLCtDQUFtRDtBQUluRCx1QkFBMEI7QUFDMUIsNkRBQStDO0FBSy9DLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXpELElBQVkscUJBS1g7QUFMRCxXQUFZLHFCQUFxQjtJQUM3Qix5REFBb0IsU0FBUyxhQUFBLENBQUE7SUFDN0IsdURBQW9CLE9BQU8sV0FBQSxDQUFBO0lBQzNCLDBEQUFvQixVQUFVLGNBQUEsQ0FBQTtJQUM5Qiw0REFBb0IsWUFBWSxnQkFBQSxDQUFBO0FBQ3BDLENBQUMsRUFMVyxxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQUtoQztBQStCRCwyQkFBMEMsT0FBdUI7SUFFdEQsSUFBQSxpQkFBRyxFQUFFLHFCQUFLLEVBQUUsdUJBQU0sRUFBRSwyQkFBUSxDQUFZO0lBQ3pDLElBQUEsOENBQTRELEVBQTNELGdCQUFLLEVBQUUsc0JBQVEsRUFBRSxrQkFBTSxDQUFxQztJQUVuRTs7O09BR0c7SUFDSCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFdkIsUUFBUSxDQUFDO1lBQ0wsSUFBSSxFQUFFLDhCQUFXLENBQUMsVUFBVTtZQUM1QixJQUFJLEVBQUU7Z0JBQ0YsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHO2dCQUNoQixjQUFjLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNsQyxLQUFLLE9BQUE7Z0JBQ0wsTUFBTSxRQUFBO2FBQ1c7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDO1lBQ0gsS0FBSyxFQUFFO2dCQUNILFFBQVEsVUFBQTtnQkFDUixLQUFLLE9BQUE7Z0JBQ0wsTUFBTSxFQUFFLEVBQUU7YUFDYjtZQUNELE9BQU8sRUFBTyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRTtTQUN0QyxDQUFDO0lBQ04sQ0FBQztJQUVELEtBQUssQ0FBQyxzQ0FBb0MsTUFBTSxDQUFDLE9BQU8sTUFBRyxDQUFDLENBQUM7SUFFN0Q7O09BRUc7SUFDSCxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsOEJBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUMsUUFBUSxVQUFBLEVBQUUsR0FBRyxLQUFBLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBQyxFQUFDLENBQUMsQ0FBQztJQUV2Rjs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQztRQUNILEtBQUssRUFBRTtZQUNILFFBQVEsVUFBQTtZQUNSLEtBQUssT0FBQTtZQUNMLE1BQU0sRUFBRSxFQUFFO1NBQ2I7UUFDRCxPQUFPLEVBQUUsNkJBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQzthQUNsQyxPQUFPLENBQUMsVUFBQyxVQUFzQjtZQUM1QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3ZDLENBQUM7WUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7S0FDakIsQ0FBQztBQUNOLENBQUM7O0FBMURELG9DQTBEQyJ9