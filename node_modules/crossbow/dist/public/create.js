"use strict";
// todo why are these imports needed here?
var command_watch_1 = require("../command.watch");
var task_utils_1 = require("../task.utils");
var merge = require("../../lodash.custom").merge;
var fncount = 0;
var inlineWatcherCount = 0;
function incomingTask(taskname, deps, fn) {
    // only 2 params given (function last);
    if (typeof deps === "function") {
        fn = deps;
        deps = [];
    }
    var outgoing = {};
    if (task_utils_1.isPlainObject(deps) && deps.tasks) {
        if (deps.tasks) {
            outgoing[taskname] = deps;
        }
        else {
            throw new Error("Object literal must contain at least a \"tasks\" key");
        }
        if (fn) {
            var fnname = taskname + "_internal_fn_" + fncount++;
            outgoing[fnname] = fn;
            outgoing[taskname].tasks.push(fn);
        }
        return outgoing;
    }
    deps = [].concat(deps).filter(Boolean);
    if (deps.length) {
        if (!fn) {
            outgoing[taskname] = deps;
        }
        else {
            var fnname = taskname + "_internal_fn_" + fncount;
            outgoing[fnname] = fn;
            outgoing[taskname] = deps.concat(fnname);
        }
    }
    else {
        if (fn) {
            outgoing[taskname] = fn;
        }
    }
    return outgoing;
}
var input = {
    tasks: {},
    watch: {},
    options: {},
    env: {},
    config: {},
    cli: {},
    reporter: function () {
    } // to be set by lib
};
function incomingOptions(taskname, hash) {
    var outgoing = {};
    if (typeof taskname === "string") {
        outgoing[taskname] = hash;
        return outgoing;
    }
    return taskname;
}
exports.api = {
    input: input,
    env: function (obj) {
        input.env = merge(input.env, obj);
    },
    config: function (obj) {
        input.config = merge(input.config, obj);
    },
    task: function (taskname) {
        var res = incomingTask.apply(null, arguments);
        input.tasks = merge(input.tasks, res);
        return {
            options: function (hash) {
                var res = incomingOptions(taskname, hash);
                input.options = merge(input.options, res);
            }
        };
    },
    group: function (groupName, tasks) {
        input.tasks["(" + groupName + ")"] = tasks;
    },
    options: function (incoming) {
        var res = incomingOptions.apply(null, arguments);
        input.options = merge(input.options, res);
    },
    watch: function (patterns, tasks, options) {
        var watcher = getWatcher(patterns, tasks, options);
        var sub = watcher.flatMap(function (watchCommand) {
            return watchCommand.update$;
        });
        return sub.subscribe();
    },
    watcher: function (patterns, tasks, options) {
        var watcher = getWatcher(patterns, tasks, options);
        return watcher.flatMap(function (watchCommand) {
            return watchCommand.update$;
        });
    }
};
function getWatcher(patterns, tasks, options) {
    var identifer = "_inline_watcher_" + inlineWatcherCount++;
    patterns = [].concat(patterns);
    tasks = [].concat(tasks);
    input.watch[identifer] = {
        options: options,
        watchers: [
            {
                patterns: patterns,
                tasks: tasks
            }
        ]
    };
    var cliInput = ["watch", identifer];
    return command_watch_1.default({ input: cliInput, flags: {} }, input, input.config, input.reporter);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = input;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3B1YmxpYy9jcmVhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUdBLDBDQUEwQztBQUMxQyxrREFBK0U7QUFFL0UsNENBQTRDO0FBRTVDLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUluRCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDaEIsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFNM0Isc0JBQXNCLFFBQWdCLEVBQUUsSUFBUyxFQUFFLEVBQVE7SUFFdkQsdUNBQXVDO0lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNWLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBRXBCLEVBQUUsQ0FBQyxDQUFDLDBCQUFhLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDYixRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzlCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztRQUM1RSxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNMLElBQU0sTUFBTSxHQUFNLFFBQVEscUJBQWdCLE9BQU8sRUFBSSxDQUFDO1lBQ3RELFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdEIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV2QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNOLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDOUIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBTSxNQUFNLEdBQU0sUUFBUSxxQkFBZ0IsT0FBUyxDQUFDO1lBQ3BELFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdEIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsQ0FBQztJQUNMLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDTCxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzVCLENBQUM7SUFDTCxDQUFDO0lBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBRUQsSUFBSSxLQUFLLEdBQUc7SUFDUixLQUFLLEVBQUUsRUFBRTtJQUNULEtBQUssRUFBRSxFQUFFO0lBQ1QsT0FBTyxFQUFFLEVBQUU7SUFDWCxHQUFHLEVBQUUsRUFBRTtJQUNQLE1BQU0sRUFBeUIsRUFBRTtJQUNqQyxHQUFHLEVBQU8sRUFBRTtJQUNaLFFBQVEsRUFBRTtJQUNWLENBQUMsQ0FBQyxtQkFBbUI7Q0FDeEIsQ0FBQztBQUVGLHlCQUF5QixRQUFnQixFQUFFLElBQVU7SUFDakQsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0IsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUMxQixNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFFWSxRQUFBLEdBQUcsR0FBRztJQUNmLEtBQUssRUFBRSxLQUFLO0lBQ1osR0FBRyxFQUFFLFVBQVUsR0FBUTtRQUNuQixLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxNQUFNLEVBQUUsVUFBVSxHQUFRO1FBQ3RCLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNELElBQUksRUFBRSxVQUFVLFFBQWdCO1FBQzVCLElBQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDO1lBQ0gsT0FBTyxFQUFFLFVBQVUsSUFBUztnQkFDeEIsSUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDNUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM5QyxDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUM7SUFDRCxLQUFLLEVBQUUsVUFBVSxTQUFpQixFQUFFLEtBQVM7UUFDekMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFJLFNBQVMsTUFBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQzFDLENBQUM7SUFDRCxPQUFPLEVBQUUsVUFBVSxRQUFZO1FBQzNCLElBQU0sR0FBRyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ25ELEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNELEtBQUssRUFBRSxVQUFVLFFBQWtCLEVBQUUsS0FBZSxFQUFFLE9BQXdCO1FBQzFFLElBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxZQUFnQztZQUNsRSxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNELE9BQU8sRUFBRSxVQUFVLFFBQWtCLEVBQUUsS0FBZSxFQUFFLE9BQXdCO1FBQzVFLElBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBZ0M7WUFDcEQsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0osQ0FBQztBQUVGLG9CQUFvQixRQUFrQixFQUFFLEtBQWUsRUFBRSxPQUF3QjtJQUM3RSxJQUFNLFNBQVMsR0FBRyxxQkFBbUIsa0JBQWtCLEVBQUksQ0FBQztJQUM1RCxRQUFRLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixLQUFLLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV6QixLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHO1FBQ3JCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLFFBQVEsRUFBRTtZQUNOO2dCQUNJLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixLQUFLLEVBQUUsS0FBSzthQUNmO1NBQ0o7S0FDSixDQUFDO0lBRUYsSUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdEMsTUFBTSxDQUFDLHVCQUFZLENBQUMsRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0YsQ0FBQzs7QUFFRCxrQkFBZSxLQUFLLENBQUMifQ==