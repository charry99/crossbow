"use strict";
var command_run_1 = require("./command.run");
var task_resolve_1 = require("./task.resolve");
var Rx = require("rx");
var file_utils_1 = require("./file.utils");
var task_utils_1 = require("./task.utils");
function execute(trigger) {
    var input = trigger.input, config = trigger.config;
    var allNames = Object.keys(trigger.input.tasks);
    var possibleParents = allNames.filter(function (x) { return task_utils_1.isParentGroupName(x); });
    var possibleDefaults = allNames.filter(function (x) { return !task_utils_1.isParentGroupName(x); });
    var cliInput = trigger.cli.input.slice(1);
    var defaultInputNames = cliInput.filter(function (x) { return !task_utils_1.isParentRef(x, possibleParents); });
    var parentInputNames = cliInput.filter(function (x) { return task_utils_1.isParentRef(x, possibleParents); });
    /**
     * Either resolve ALL tasks, or a subset if given
     * via the cli.
     *
     * eg:
     *      crossbow ls -> all tasks
     *      crossbow ls build-all -> only build all tasks
     */
    var defaultsToResolve = (function () {
        if (defaultInputNames.length) {
            return defaultInputNames;
        }
        if (parentInputNames.length) {
            return [];
        }
        var taskNamesFromTasksDir = file_utils_1.getPossibleTasksFromDirectories(config.tasksDir, config.cwd);
        return possibleDefaults.concat(taskNamesFromTasksDir);
    })();
    var parentsToResolve = (function () {
        if (parentInputNames.length) {
            return parentInputNames;
        }
        if (defaultInputNames.length) {
            return [];
        }
        return possibleParents;
    })();
    /**
     * Resolve the subset
     * @type {Tasks}
     */
    var resolvedDefault = task_resolve_1.resolveTasks(defaultsToResolve, trigger);
    var resolvedParents = parentsToResolve
        .map(task_utils_1.getChildName)
        .reduce(function (acc, key) {
        var childKeys = Object.keys(task_utils_1.getChildItems(key, input.tasks));
        var plainName = key.slice(1, -1);
        if (!acc[plainName]) {
            acc[plainName] = childKeys;
        }
        else {
            acc[plainName].push.apply(acc[plainName], childKeys);
        }
        return acc;
    }, {});
    function getParents(resolvedParents, trigger) {
        return Object.keys(resolvedParents).map(function (key) {
            var parent = resolvedParents[key];
            var items = parent.map(function (x) { return key + ":" + x; });
            var resolved = task_resolve_1.resolveTasks(items, trigger);
            return { title: key, tasks: resolved };
        });
    }
    var groups = (function () {
        if (resolvedDefault.all.length) {
            return [
                { title: "Default Tasks", tasks: resolvedDefault }
            ].concat(getParents(resolvedParents, trigger));
        }
        return getParents(resolvedParents, trigger);
    })();
    var tasks = groups.reduce(function (acc, group) {
        return acc.concat(group.tasks.all);
    }, []);
    return Rx.Observable.just({
        setup: {
            groups: groups,
            tasks: tasks,
            errors: []
        }
    });
}
function handleIncomingTasksCommand(cli, input, config, reporter) {
    return execute({
        cli: cli,
        input: input,
        config: config,
        reporter: reporter,
        type: command_run_1.TriggerTypes.command
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handleIncomingTasksCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC50YXNrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tYW5kLnRhc2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSw2Q0FBMkQ7QUFHM0QsK0NBQXlEO0FBR3pELHVCQUEwQjtBQUMxQiwyQ0FBNkQ7QUFDN0QsMkNBRXNCO0FBbUJ0QixpQkFBaUIsT0FBdUI7SUFFN0IsSUFBQSxxQkFBSyxFQUFFLHVCQUFNLENBQWM7SUFFbEMsSUFBTSxRQUFRLEdBQVksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNELElBQU0sZUFBZSxHQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSw4QkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO0lBQ3JFLElBQU0sZ0JBQWdCLEdBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsOEJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztJQUV0RSxJQUFNLFFBQVEsR0FBWSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsSUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyx3QkFBVyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBaEMsQ0FBZ0MsQ0FBQyxDQUFDO0lBQ2pGLElBQU0sZ0JBQWdCLEdBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLHdCQUFXLENBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxFQUEvQixDQUErQixDQUFDLENBQUM7SUFFaEY7Ozs7Ozs7T0FPRztJQUNILElBQU0saUJBQWlCLEdBQUcsQ0FBQztRQUN2QixFQUFFLENBQUMs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