"use strict";
var utils = require("./task.utils");
var file = require("./file.utils");
var task_utils_1 = require("./task.utils");
var task_utils_2 = require("./task.utils");
var debug = require("debug")("cb:input");
var _ = require("../lodash.custom");
var InputTypes;
(function (InputTypes) {
    InputTypes[InputTypes["DefaultExternalFile"] = "DefaultExternalFile"] = "DefaultExternalFile";
    InputTypes[InputTypes["ExternalFile"] = "ExternalFile"] = "ExternalFile";
    InputTypes[InputTypes["InlineObject"] = "InlineObject"] = "InlineObject";
    InputTypes[InputTypes["StubInlineObject"] = "StubInlineObject"] = "StubInlineObject";
    InputTypes[InputTypes["CBFile"] = "CBFile"] = "CBFile";
    InputTypes[InputTypes["InlineJSON"] = "InlineJSON"] = "InlineJSON";
})(InputTypes = exports.InputTypes || (exports.InputTypes = {}));
function getInputs(config, inlineInput) {
    /**
     * If the User provided a -c flag we MUST validate this
     * request first as it may fail and then we don't want to continue
     */
    if (config.input.length) {
        debug("config flag provided " + config.input);
        var stringInputs = config.input.filter(function (x) { return typeof x === "string"; });
        var inlineInputs = config.input.filter(function (x) { return task_utils_2.isPlainObject(x); });
        var fileInputs = file.readInputFiles(stringInputs, config.cwd);
        var mergedFileInputs = fileInputs.valid.map(function (file) { return file.input; });
        var mergedInputs = _.merge.apply(_, [generateBaseInput({})].concat(mergedFileInputs, inlineInputs, [inlineInput]));
        if (fileInputs.invalid.length) {
            return {
                type: InputTypes.ExternalFile,
                errors: fileInputs.invalid.map(function (x) { return x.errors[0]; }),
                sources: fileInputs.invalid,
                inputs: [],
            };
        }
        return {
            type: InputTypes.ExternalFile,
            errors: [],
            sources: fileInputs.valid,
            inputs: [
                /**
                 * Merged all given configs into a single obj
                 * This is to allow, for example, production
                 * configuration to override dev etc..
                 */
                mergedInputs
            ],
        };
    }
    if (config.fromJson) {
        try {
            var parsed = JSON.parse(config.fromJson);
            return {
                errors: [],
                sources: [],
                type: InputTypes.InlineJSON,
                inputs: [generateBaseInput(parsed)]
            };
        }
        catch (e) {
            return {
                errors: [{ type: task_utils_1.InputErrorTypes.InvalidJson, json: config.fromJson, error: e }],
                sources: [],
                type: InputTypes.InlineJSON,
                inputs: []
            };
        }
    }
    /**
     * If the User provided --cbfile flag we MUST validate this
     * request first as it may fail and then we don't want to continue
     */
    if (config.cbfile) {
        debug("'cbfile' flag provided " + config.cbfile);
        var cbfiles = file.retrieveCBFiles(config);
        if (cbfiles.invalid.length) {
            return {
                type: InputTypes.CBFile,
                errors: cbfiles.invalid.map(function (x) { return x.errors[0]; }),
                sources: cbfiles.invalid,
                inputs: [],
            };
        }
        return {
            type: InputTypes.CBFile,
            errors: [],
            sources: cbfiles.valid,
            inputs: [],
        };
    }
    /**
     * Crossbow may be used with a simple object literal input.
     * This is how the test suit is even possible in such a system
     */
    if (utils.isPlainObject(inlineInput)) {
        debug("plain object given as input " + JSON.stringify(inlineInput));
        return {
            type: InputTypes.InlineObject,
            errors: [],
            sources: [],
            inputs: [generateBaseInput(inlineInput)]
        };
    }
    if (!config.loadDefaultInputs) {
        debug("config.loadDefaultInputs = false, not looking for default file types");
        return {
            errors: [],
            sources: [],
            type: InputTypes.StubInlineObject,
            inputs: [generateBaseInput({})]
        };
    }
    /**
     * Finally, try any cbfiles in the cwd
     */
    var defaultCbFiles = file.retrieveCBFiles(config);
    /**
     * If a cbfile.js **was** found in the current
     * directory, it will have been 'required' and therefor
     * some code will have run, which may of errored.
     * So here we check for that possible error by
     * filtering out `InputFileNotFound` errors (which simply mean
     * a cbfile.js was not found anyway.
     */
    var inputErrors = defaultCbFiles.invalid
        .filter(function (x) { return x.errors[0].type !== task_utils_1.InputErrorTypes.InputFileNotFound; });
    if (inputErrors.length) {
        return {
            type: InputTypes.CBFile,
            errors: inputErrors.map(function (x) { return x.errors[0]; }),
            sources: inputErrors,
            inputs: [],
        };
    }
    if (defaultCbFiles.valid.length) {
        debug("Default cbfile found " + defaultCbFiles.valid[0].resolved);
        return {
            errors: [],
            type: InputTypes.CBFile,
            sources: defaultCbFiles.valid,
            inputs: []
        };
    }
    /**
     * At this point, the user has not attempted to load any config files manually
     * so we try to load any defaults that are in the CWD
     */
    var defaultInputputFiles = file.retrieveDefaultInputFiles(config);
    var notMissingFileErrors = defaultInputputFiles.invalid
        .filter(function (x) { return x.errors[0].type !== task_utils_1.InputErrorTypes.InputFileNotFound; });
    if (notMissingFileErrors.length) {
        debug("Default input found with errors " + notMissingFileErrors[0].resolved);
        return {
            errors: notMissingFileErrors.reduce(function (acc, x) { return acc.concat(x.errors); }, []),
            type: InputTypes.DefaultExternalFile,
            sources: notMissingFileErrors,
            inputs: []
        };
    }
    if (defaultInputputFiles.valid.length) {
        debug("Default input found " + defaultInputputFiles.valid[0].resolved);
        return {
            errors: [],
            type: InputTypes.DefaultExternalFile,
            sources: defaultInputputFiles.valid,
            inputs: [generateBaseInput(defaultInputputFiles.valid[0].input)]
        };
    }
    /**
     * If we reach this point, we're working with
     * 1. NO external input files
     * 2. NO inline Object literal
     *
     * Which means we just need the stub objects, enough
     * to allow the system to work.
     */
    debug("No external input given/found, using default");
    return {
        errors: [],
        sources: [],
        type: InputTypes.InlineObject,
        inputs: [generateBaseInput({})]
    };
}
exports.getInputs = getInputs;
/**
 * `Input` is the object that is looked at to resolve tasks/options and
 * watchers
 */
function generateBaseInput(incoming) {
    return _.merge({
        tasks: {},
        watch: {
            before: [],
            options: {}
        },
        options: {},
        env: {}
    }, incoming || {});
}
exports.generateBaseInput = generateBaseInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQucmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnB1dC5yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxvQ0FBc0M7QUFDdEMsbUNBQXFDO0FBQ3JDLDJDQUE2QztBQUU3QywyQ0FBMkM7QUFFM0MsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzNDLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXRDLElBQVksVUFPWDtBQVBELFdBQVksVUFBVTtJQUNsQiwrQ0FBMkIscUJBQXFCLHlCQUFBLENBQUE7SUFDaEQsd0NBQW9CLGNBQWMsa0JBQUEsQ0FBQTtJQUNsQyx3Q0FBb0IsY0FBYyxrQkFBQSxDQUFBO0lBQ2xDLDRDQUF3QixrQkFBa0Isc0JBQUEsQ0FBQTtJQUMxQyxrQ0FBYyxRQUFRLFlBQUEsQ0FBQTtJQUN0QixzQ0FBa0IsWUFBWSxnQkFBQSxDQUFBO0FBQ2xDLENBQUMsRUFQVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQU9yQjtBQVNELG1CQUEyQixNQUE2QixFQUFFLFdBQWlCO0lBRXZFOzs7T0FHRztJQUNILEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN0QixLQUFLLENBQUMsMEJBQXdCLE1BQU0sQ0FBQyxLQUFPLENBQUMsQ0FBQztRQUU5QyxJQUFNLFlBQVksR0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBckIsQ0FBcUIsQ0FBQyxDQUFDO1FBQ3pFLElBQU0sWUFBWSxHQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsMEJBQWEsQ0FBQyxDQUFDLENBQUMsRUFBaEIsQ0FBZ0Is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