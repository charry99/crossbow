"use strict";
var file_utils_1 = require("./file.utils");
var reports = require("./reporter.resolve");
var task_utils_1 = require("./task.utils");
var _ = require("../lodash.custom");
var fs_1 = require("fs");
var fs_2 = require("fs");
var path_1 = require("path");
var fs_3 = require("fs");
/**
 * If the user has specified the `bin` option,
 * we need to ensure these paths are valid directories
 * and read the executables from them
 */
exports.addBinLookupsToObject = function (config) {
    return config.bin.length
        ? exports.getBins(config.bin, config.cwd)
            .map(function (bindirs) {
            return _.assign({}, config, {
                binDirectories: bindirs.valid,
                binExecutables: exports.getExecutables(bindirs.valid)
            });
        })
        : file_utils_1.Right(config);
};
/**
 * Resolve many bin paths
 */
exports.getBinLookups = function (paths, cwd) {
    return file_utils_1.Right([].concat(paths).map(function (path) { return exports.getBinLookup(path, cwd); }))
        .chain(function (xs) {
        return {
            all: xs,
            valid: xs.filter(function (x) { return x.errors.length === 0; }),
            invalid: xs.filter(function (x) { return x.errors.length > 0; })
        };
    });
};
/**
 * Resolve a single path. Allow for errors such as
 * not found or not a directory
 */
exports.getBinLookup = function (path, cwd) {
    return joinPath(String(path), cwd)
        .chain(function (resolved) { return file_utils_1.Right(resolved)
        .chain(function (resolved) { return binDirectoryExists(resolved); })
        .chain(function (resolved) { return isDirectory(resolved); })
        .fold(function (error) {
        return {
            errors: [error],
            resolved: resolved,
            input: path
        };
    }, function (resolved) {
        return {
            errors: [],
            resolved: resolved,
            input: path
        };
    }); });
};
/**
 * Resolve many bin directories, but if any produce an
 * error, return a Left() indicating that
 */
exports.getBins = function (dir, cwd) {
    return file_utils_1.Right(exports.getBinLookups(dir, cwd))
        .chain(function (x) { return x.invalid.length
        ? file_utils_1.Left({ type: reports.ReportTypes.BinOptionError, data: x })
        : file_utils_1.Right(x); });
};
/**
 * Scan a directory to retrieve an array of executables
 */
exports.getExecutables = function (dirs) {
    return dirs.reduce(function (acc, lookup) {
        var items = fs_2.readdirSync(lookup.resolved);
        return acc.concat(items.filter(function (dir) {
            try {
                return fs_1.statSync(path_1.join(lookup.resolved, dir)).isFile();
            }
            catch (e) {
                return false;
            }
        }));
    }, []);
};
var binDirectoryExists = function (path) {
    return fs_3.existsSync(path)
        ? file_utils_1.Right(path)
        : file_utils_1.Left({ type: task_utils_1.InputErrorTypes.BinDirectoryNotFound });
};
var isDirectory = function (path) {
    return fs_1.statSync(path).isDirectory()
        ? file_utils_1.Right(path)
        : file_utils_1.Left({ type: task_utils_1.InputErrorTypes.BinPathNotADirectory });
};
var joinPath = function (path, cwd) { return file_utils_1.Right(path_1.join(cwd, path)); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NldHVwLmJpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMkNBQXlDO0FBQ3pDLDRDQUE4QztBQUM5QywyQ0FBNkM7QUFDN0MsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdEMseUJBQTRCO0FBRTVCLHlCQUErQjtBQUMvQiw2QkFBMEI7QUFDMUIseUJBQThCO0FBRTlCOzs7O0dBSUc7QUFDVSxRQUFBLHFCQUFxQixHQUFHLFVBQUEsTUFBTTtJQUN2QyxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTTtVQUVYLGVBQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFFNUIsR0FBRyxDQUFDLFVBQUEsT0FBTztZQUNSLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUU7Z0JBQ3hCLGNBQWMsRUFBRSxPQUFPLENBQUMsS0FBSztnQkFDN0IsY0FBYyxFQUFFLHNCQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQzthQUNoRCxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7VUFDSixrQkFBSyxDQUFDLE1BQU0sQ0FBQztBQVZuQixDQVVtQixDQUFDO0FBRXhCOztHQUVHO0FBQ1UsUUFBQSxhQUFhLEdBQUcsVUFBQyxLQUFlLEVBQUUsR0FBVztJQUN0RCxPQUFBLGtCQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxvQkFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO1NBQ3ZELEtBQUssQ0FBQyxVQUFBLEVBQUU7UUFDTCxNQUFNLENBQUM7WUFDSCxHQUFHLEVBQUUsRUFBRTtZQUNQLEtBQUssRUFBRSxFQUFFLENBQUMsTUFB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