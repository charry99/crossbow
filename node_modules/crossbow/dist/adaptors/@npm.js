"use strict";
var Immutable = require("immutable");
var events_1 = require("events");
var child_process_1 = require("child_process");
var debug = require("debug")("cb:adaptors.npm");
var _ = require("../../lodash.custom");
var path_1 = require("path");
var task_utils_1 = require("../task.utils");
var sh = "sh";
var shFlag = "-c";
if (process.platform === "win32") {
    // todo test in windows env to ensure this hasn't broken anything
    // sh = process.env.comspec || 'cmd';
    sh = "cmd";
    shFlag = "/d /s /c";
}
function runCommand(args, options) {
    var raw = child_process_1.spawn(sh, args, options);
    var cooked = new events_1.EventEmitter();
    raw.on("error", function (er) {
        er.file = [sh, args].join(" ");
        cooked.emit("error", er);
    }).on("close", function (code, signal) {
        if (code === 127) {
            var er = new Error("spawn ENOENT");
            er.code = "ENOENT";
            er.errno = "ENOENT";
            er.syscall = "spawn";
            er.file = [sh, args].join(" ");
            cooked.emit("error", er);
        }
        else {
            cooked.emit("close", code, signal);
        }
    });
    cooked.stdin = raw.stdin;
    cooked.stdout = raw.stdout;
    cooked.stderr = raw.stderr;
    cooked.raw = raw;
    cooked.kill = function (sig) {
        return raw.kill(sig);
    };
    return cooked;
}
exports.runCommand = runCommand;
/**
 * Add the local ./node_modules/.bin directory to the beginning
 * of the users PATH - this will allow it to find local scripts
 * @param {process.env} process
 * @param {Immutable.Map} config
 * @param paths
 * @returns {object}
 */
function getEnv(process, config, paths) {
    var binDirs = Immutable.Set(config.binDirectories.map(function (x) { return x.resolved; }).concat(paths));
    var PATH = binDirs.add(process.env.PATH).join(":");
    return { PATH: PATH };
}
exports.getEnv = getEnv;
function getArgs(command) {
    return {
        stringInput: command,
        cmd: [shFlag].concat(command),
        errors: []
    };
}
exports.getArgs = getArgs;
function teardown(emitter, task) {
    if ((typeof emitter.raw.exitCode) !== "number") {
        debug("tearing down a child_process because exitCode is missing");
        emitter.removeAllListeners("close");
        emitter.kill("SIGINT");
        emitter.on("close", function () {
            debug("close method on child encountered");
            // todo - async teardown for sequential
        });
    }
    else {
        debug("child process already completed, not disposing");
    }
}
exports.teardown = teardown;
function getStdio(trigger) {
    // todo - prefixed logging for child processes
    if (trigger.config.suppressOutput) {
        return ["pipe", "pipe", "pipe"];
    }
    // process.stdin, process.stdout, process.stderr
    return [process.stdin, process.stdout, "pipe"];
}
exports.getStdio = getStdio;
function handleExit(emitter, done) {
    var stderr = [];
    emitter.stderr.on("data", function (data) {
        stderr.push(data);
    });
    emitter.on("close", function (code) {
        // todo: Make pretty errors that originate from child processes
        if (code !== 0) {
            var err = new Error("Previous command failed with exit code " + code);
            if (stderr.length) {
                err.stack = stderr.map(String).join("");
            }
            else {
                err.stack = "Previous command failed with exit code " + code;
            }
            err._cbError = true;
            err._cbExitCode = code;
            return done(err);
        }
        done();
    }).on("error", function (err) {
        done(err);
    });
}
exports.handleExit = handleExit;
/**
 * The main export is the function this will be run in the sequence
 * @returns {Function}
 */
function default_1(task, trigger) {
    return function (opts, ctx, done) {
        var commandArgs = getArgs(task.command);
        var npmEnv = getEnv(process, trigger.config, [path_1.join(trigger.config.cwd, "node_modules", ".bin")]);
        var cbEnv = task_utils_1.getCBEnv(trigger);
        var ctxEnv = task_utils_1.getContextEnv(trigger, ctx);
        var env = _.merge({}, process.env, npmEnv, cbEnv, task.env, trigger.config.env, ctxEnv);
        var stdio = getStdio(trigger);
        debug("+ running '%s %s'", sh, commandArgs.cmd.join(" "));
        var emitter = runCommand(commandArgs.cmd, {
            cwd: trigger.config.cwd,
            env: env,
            stdio: stdio // [process.stdin, process.stdout, process.stderr]
        });
        handleExit(emitter, done);
        return function tearDownNpmAdaptor() {
            teardown(emitter, task);
        };
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQG5wbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdG9ycy9AbnBtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxxQ0FBd0M7QUFFeEMsaUNBQW9DO0FBQ3BDLCtDQUFvQztBQUNwQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNsRCxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUV6Qyw2QkFBMEI7QUFFMUIsNENBQXNEO0FBRXRELElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztBQUNkLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztBQUVsQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDL0IsaUVBQWlFO0lBQ2pFLHFDQUFxQztJQUNyQyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ1gsTUFBTSxHQUFHLFVBQVUsQ0FBQztBQUN4QixDQUFDO0FBdUJELG9CQUFvQixJQUFjLEVBQUUsT0FBdUI7SUFDdkQsSUFBTSxHQUFHLEdBQUcscUJBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLElBQU0sTUFBTSxHQUFjLElBQUkscUJBQVksRUFBRSxDQUFDO0lBRTdDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBTztRQUM3QixFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBSSxFQUFFLE1BQU07UUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxL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