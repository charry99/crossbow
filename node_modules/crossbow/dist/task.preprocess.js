"use strict";
var task_resolve_1 = require("./task.resolve");
var cli_parse_1 = require("./cli.parse");
var task_resolve_2 = require("./task.resolve");
var task_utils_1 = require("./task.utils");
var task_errors_1 = require("./task.errors");
var _ = require("../lodash.custom");
var qs = require("qs");
var flagRegex = /(.+?)@(.+)?$/;
var inlineFnCount = 0;
function preprocessTask(taskName, trigger, parents) {
    var output = (function () {
        if (typeof taskName === "function") {
            return handleFunctionInput(taskName, trigger.input, parents);
        }
        if (typeof taskName === "string") {
            return handleStringInput(taskName, trigger, parents);
        }
        if (task_utils_1.isPlainObject(taskName)) {
            return handleObjectInput(taskName, trigger.input, parents);
        }
        if (Array.isArray(taskName)) {
            return handleArrayInput(taskName, trigger.input, parents);
        }
    })();
    /**
     * Mark this item as 'skipped' if the task name matches
     * one given in the --skip flag via CLI
     *
     * Note: this is separate to individual task config
     *
     *  eg:
     *      crossbow run deploy --skip build-js
     *
     *  -> All tasks under deploy still run, but build-js will be skipped
     */
    if (trigger.config.skip.length) {
        if (trigger.config.skip.indexOf(output.baseTaskName) > -1) {
            output.skipped = true;
        }
    }
    return output;
}
exports.preprocessTask = preprocessTask;
var objectCount = 0;
function handleObjectInput(taskLiteral, input, parents) {
    /**
     * Any value on the 'tasks' property
     */
    if (taskLiteral.tasks) {
        var name = "AnonObject_" + objectCount++;
        var out = task_resolve_2.createTask(_.assign({
            baseTaskName: name,
            taskName: name,
            rawInput: JSON.stringify(taskLiteral),
            valid: true,
            parents: parents,
            origin: task_resolve_2.TaskOriginTypes.InlineObject,
            type: task_resolve_2.TaskTypes.TaskGroup
        }, taskLiteral));
        return out;
    }
    if (typeof taskLiteral.input === "string") {
        return stubAdaptor(taskLiteral.input, taskLiteral, parents);
    }
    if (typeof taskLiteral.adaptor === "string" && typeof taskLiteral.command === "string") {
        taskLiteral.adaptor = taskLiteral.adaptor.replace(/^@/, "");
        return stubAdaptor("@" + taskLiteral.adaptor + " " + taskLiteral.command, taskLiteral, parents);
    }
    return task_resolve_2.createTask({
        rawInput: task_utils_1.stringifyObj(taskLiteral),
        taskName: "",
        type: task_resolve_2.TaskTypes.Adaptor,
        origin: task_resolve_2.TaskOriginTypes.Adaptor,
        adaptor: "",
        errors: [{
                type: task_errors_1.TaskErrorTypes.InvalidTaskInput,
                input: taskLiteral
            }]
    });
}
exports.handleObjectInput = handleObjectInput;
function handleArrayInput(taskItems, input, parents) {
    var name = "AnonGroup_" + taskItems.join(",").slice(0, 10) + "...";
    return task_resolve_2.createTask({
        runMode: task_resolve_2.TaskRunModes.parallel,
        baseTaskName: name,
        taskName: name,
        rawInput: taskItems.toString(),
        valid: true,
        parents: parents,
        origin: task_resolve_2.TaskOriginTypes.InlineArray,
        type: task_resolve_2.TaskTypes.TaskGroup,
        tasks: taskItems
    });
}
exports.handleArrayInput = handleArrayInput;
function stubAdaptor(inputString, taskLiteral, parents) {
    var taskLiteralAdaptor = task_resolve_2.createAdaptorTask(inputString, parents);
    return _.assign({}, taskLiteralAdaptor, taskLiteral);
}
/**
 * String can be given that may be task themselves, like NPM tasks
 * or shell commands, but they can also be an alias for other tasks
 *
 * examples:
 *
 *  - @npm webpack --config webpack.dev.js
 *  - build (which may be an alias for many other tasks)
 */
function handleStringInput(taskName, trigger, parents) {
    var input = trigger.input;
    /**
     * Never modify the current task if it begins
     * with a `@` - instead just return early with
     * a adaptors task
     *  eg: `@npm webpack`
     */
    if (taskName.match(/^@/)) {
        return task_resolve_2.createAdaptorTask(taskName, parents);
    }
    /**
     * Split any end cbflags from the main task name
     * @type {SplitTaskAndFlags}
     */
    var split = getSplitFlags(taskName, input);
    /**
     * Split the incoming taskname on colons
     *  eg: sass:site:dev
     *  ->  ['sass', 'site', 'dev']
     * @type {Array}
     */
    var splitTask = split.taskName.split(":");
    /**
     * Take the first (or the only) item as the base task name
     *  eg: uglify:*
     *  ->  'uglify'
     * @type {string}
     */
    var baseTaskName = splitTask[0];
    var subTasks = splitTask.slice(1);
    var isParentName = /^\(.+?\)$/.test(baseTaskName);
    var inputMatchesParentName = (function () {
        if (input.tasks["(" + splitTask[0] + ")"]) {
            return true;
        }
        if (splitTask[0].match(/^\(.+?\)$/) && input.tasks[splitTask[0]]) {
            return true;
        }
    })();
    var normalisedTaskName = (function () {
        if (isParentName)
            return baseTaskName.slice(1, -1);
        return baseTaskName;
    })();
    // Before we create the base task, check if this is an alias
    // to another top-level task
    var topLevel = (function () {
        var base = task_resolve_1.getTopLevelValue(normalisedTaskName, input);
        if (inputMatchesParentName && subTasks.length) {
            return _.get(base, [subTasks], {});
        }
        return base;
    })();
    var topLevelOptions = (function () {
        if (inputMatchesParentName && subTasks.length) {
            return _.get(input.options, [normalisedTaskName].concat(subTasks), {});
        }
        return _.get(input.options, [normalisedTaskName], {});
    })();
    /**
     * Create the base task
     */
    var incomingTask = (function () {
        // if it's not an alias
        if (!topLevel && trigger.config.binExecutables.length) {
            // if the normalised task name matches an executable
            if (trigger.config.binExecutables.indexOf(normalisedTaskName) !== -1) {
                return task_resolve_2.createTask({
                    baseTaskName: taskName,
                    valid: true,
                    adaptor: 'sh',
                    taskName: taskName,
                    rawInput: taskName,
                    parents: parents,
                    command: taskName,
                    runMode: task_resolve_2.TaskRunModes.series,
                    origin: task_resolve_2.TaskOriginTypes.Adaptor,
                    type: task_resolve_2.TaskTypes.Adaptor
                });
            }
        }
        var base = task_resolve_2.createTask({
            cbflags: split.cbflags,
            query: split.query,
            flags: split.flags,
            baseTaskName: normalisedTaskName,
            subTasks: subTasks,
            taskName: normalisedTaskName,
            rawInput: taskName,
            options: topLevelOptions
        });
        if (task_utils_1.isPlainObject(topLevel) && topLevel.tasks) {
            /**
             * Create the base task
             */
            return _.merge({}, base, topLevel, {
                origin: task_resolve_2.TaskOriginTypes.InlineChildObject,
                type: inputMatchesParentName ? task_resolve_2.TaskTypes.ParentGroup : task_resolve_2.TaskTypes.TaskGroup
            });
        }
        return base;
    })();
    if (inputMatchesParentName) {
        incomingTask.type = task_resolve_2.TaskTypes.ParentGroup;
    }
    /**
     * Now pass it off to allow any flags to applied
     */
    return processFlags(incomingTask);
}
/**
 * Function can be given inline so this methods handles that
 */
function handleFunctionInput(taskName, input, parents) {
    var fnName = taskName["name"];
    var identifier = "_inline_fn_" + inlineFnCount++ + "_" + fnName;
    return task_resolve_2.createTask({
        runMode: task_resolve_2.TaskRunModes.series,
        baseTaskName: identifier,
        taskName: identifier,
        rawInput: identifier,
        inlineFunctions: [taskName],
        valid: true,
        parents: parents,
        origin: task_resolve_2.TaskOriginTypes.InlineFunction,
        type: task_resolve_2.TaskTypes.InlineFunction
    });
}
/**
 *
 */
function getSplitFlags(taskName, input) {
    /**
     * Split up the task name from any flags/queries/cbflags etc
     * @type {{baseName: string, flags: {}}}
     */
    var baseNameAndFlags = getBaseNameAndFlags(taskName);
    /**
     * Split tasks based on whether or not they have flags
     *    eg: crossbow run '@npm run webpack@p'
     *    ->  taskName: '@npm run webpack'
     *    ->  cbflags: ['p']
     * @type {RegExpMatchArray}
     */
    var splitCBFlags = baseNameAndFlags.baseName.match(flagRegex);
    /**
     * If splitFlags is falsey, there was no flag so return
     * an empty array and the full task name
     */
    if (!splitCBFlags) {
        var splitQuery_1 = baseNameAndFlags.baseName.split("?");
        var query_1 = getQuery(splitQuery_1);
        /**
         * Next, look at the top-level input,
         * is this taskname going to match, and if so, does it contain any flags?
         */
        var cbflags_1 = Object.keys(input.tasks).reduce(function (all, key) {
            var firstSectionOfTaskName = taskName.split(' ')[0];
            var match = key.match(new RegExp("^" + firstSectionOfTaskName + "@(.+)"));
            if (match) {
                return all.concat(match[1].split(""));
            }
            return all;
        }, []);
        return { taskName: splitQuery_1[0], query: query_1, cbflags: cbflags_1, flags: baseNameAndFlags.flags };
    }
    /**
     * At this point, there was at LEAST an @ at the end of the task name
     * @type {string}
     */
    var base = splitCBFlags[1];
    var splitQuery = base.split("?");
    var query = getQuery(splitQuery);
    var cbflags = (function () {
        /**
         * If the 3rd item in the regex match is undefined, it means
         * the @ was used at the end of the task name, but a value was not given.
         * In that case we return an empty string to allow the error collection
         * to kick in later
         * @type {string[]}
         */
        if (splitCBFlags[2] === undefined) {
            return [""];
        }
        /**
         * Default case is where there are chars after the @, so we split them up
         *   eg: crossbow run '@npm run webpack@pas'
         *   ->  flags: ['p', 'a', 's']
         */
        return splitCBFlags[2].split("");
    })();
    return {
        taskName: splitQuery[0],
        query: query,
        cbflags: cbflags,
        flags: baseNameAndFlags.flags
    };
}
function getQuery(splitQuery) {
    if (splitQuery.length > 1) {
        return qs.parse(splitQuery[1]);
    }
    return {};
}
/**
 * Apply any transformations to options based on
 * CB flags
 * // todo refactor this
 * @param task
 * @returns {any}
 */
function processFlags(task) {
    var runMode = (function () {
        if (task.runMode === task_resolve_2.TaskRunModes.parallel)
            return task_resolve_2.TaskRunModes.parallel;
        if (task.cbflags.indexOf("p") > -1) {
            return task_resolve_2.TaskRunModes.parallel;
        }
        return task_resolve_2.TaskRunModes.series;
    })();
    return _.assign({}, task, {
        runMode: runMode
    });
}
/**
 * Split basename + opts
 * @param taskName
 * @returns {{baseName: any, flags: {}}}
 */
function getBaseNameAndFlags(taskName) {
    var splitFlags = taskName.trim().split(/^(.+?) /);
    /**
     * Basename is everything upto the first space
     * @type {string}
     */
    var baseName = (function () {
        if (splitFlags.length === 1) {
            return splitFlags[0];
        }
        return splitFlags[1];
    })();
    /**
     * Flags is an object containing anything after the first space,
     * parsed as CLI input
     * @type {Flags|{}}
     */
    var flags = (function () {
        if (splitFlags.length === 3) {
            return cli_parse_1.default(splitFlags[1] + " " + splitFlags[2]).flags;
        }
        return {};
    })();
    return { baseName: baseName, flags: flags };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay5wcmVwcm9jZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Rhc2sucHJlcHJvY2Vzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0NBQXNEO0FBQ3RELHlDQUFnQztBQUVoQywrQ0FHd0I7QUFDeEIsMkNBQXlEO0FBRXpELDZDQUE2QztBQUs3QyxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUN0QyxJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsSUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDO0FBRWpDLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQztBQUV0Qix3QkFBK0IsUUFBMEIsRUFBRSxPQUF1QixFQUFFLE9BQWlCO0lBRWpHLElBQUksTUFBTSxHQUFHLENBQUM7UUFDVixFQUFFLENBQUMsQ0FBQyxPQUFPLFFBQVEsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBTSxRQUFRLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RSxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsMEJBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLENBQUMsZ0JB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